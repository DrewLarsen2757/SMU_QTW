library(caret)
install.packages('FNN')
library(tidyverse)
library(magrittr)
library(class)
library(caret)
library(FNN)
select(fullonlinedf, -c(posX))
get.knn(select(fullofflinedf, -c(posX)), select(fullonlinedf, -c(posX)), k = 7)
get.knn(select(fullofflinedf, -c(posX)), select(fullonlinedf, -c(posX)), k = 7)
get.knn(select(fullofflinedf, k = 7)
get.knn(select(fullofflinedf, -c(posX)), k = 7)
?get.knnx
knn.reg(select(fullofflinedf, -c(posX, posY)), select(fullonlinedf, -c(posX, posY)))
fullofflinedf
fullonlinedf
select(fullofflinedf, -c(posX, posY))
select(fullonlinedf, -c(posX, posY))
get.knn(select(fullofflinedf, -c(posX)), k = 7)
?get.knnx
knn.reg(select(fullofflinedf, -c(posX, posY)), select(fullonlinedf, -c(time, orientation, nas, posXY, posX, posY)))
knn.reg(train = select(fullofflinedf, -c(posY)), test = select(fullonlinedf, -c(time, orientation, nas, posXY, posY)), y = posX)
knn.reg(train = select(fullofflinedf, -c(posY)), test = select(fullonlinedf, -c(time, orientation, nas, posXY, posY)), y = fullofflinedf$posX)
fitx = knn.reg(train = select(fullofflinedf, -c(posY, posX)), test = select(fullonlinedf, -c(time, orientation, nas, posXY, posY, posX)), y = fullofflinedf$posX)
fitx
fitx$pred
fitx$n
fitx$k
fitx$call
fitx$residuals
get.knn(select(fullofflinedf, -c(posY, posX)),select(fullonlinedf, -c(time, orientation, nas, posXY, posY, posX)),  k = 7)
fullonlinedf
fullofflinedf
select(fullonlinedf[1], -c(time, posX, posY, orientation, nas, posXY))
fullonlinedf
fullonlinedf[1]
select(fullonlinedf[1,], -c(time, posX, posY, orientation, nas, posXY))
sum(select(fullonlinedf[1,], -c(time, posX, posY, orientation, nas, posXY)) - select(fullofflinedf[1], -c(posX, posY)))
sum(select(fullonlinedf[1,], -c(time, posX, posY, orientation, nas, posXY)) - select(fullofflinedf[1,], -c(posX, posY)))
sum(select(fullonlinedf[1,], -c(time, posX, posY, orientation, nas, posXY)) - select(fullofflinedf, -c(posX, posY)))
for (i in 1:166) {
weight[i] = sum((select(fullonlinedf[1,], -c(time, posX, posY, orientation, nas, posXY)) -
select(fullofflinedf[i,], -c(posX, posY)^2)))
}
for (i in 1:166) {
weight[i] = sum((select(fullonlinedf[1,], -c(time, posX, posY, orientation, nas, posXY)) -
select(fullofflinedf[i,], -c(posX, posY))^2))
}
weight = data.frame()
for (i in 1:166) {
weight[i] = sum((select(fullonlinedf[1,], -c(time, posX, posY, orientation, nas, posXY)) -
select(fullofflinedf[i,], -c(posX, posY))^2))
}
sum((select(fullonlinedf[1,], -c(time, posX, posY, orientation, nas, posXY)) -
select(fullofflinedf[1,], -c(posX, posY))^2))
sqrt(sum((select(fullonlinedf[1,], -c(time, posX, posY, orientation, nas, posXY)) -
select(fullofflinedf[1,], -c(posX, posY))^2)))
sum((select(fullonlinedf[1,], -c(time, posX, posY, orientation, nas, posXY)) -
select(fullofflinedf[1,], -c(posX, posY))^2))
sqrt(sum((select(fullonlinedf[1,], -c(time, posX, posY, orientation, nas, posXY)) -
select(fullofflinedf[1,], -c(posX, posY)))^2))
weight = data.frame()
for (i in 1:166) {
weight[i] = sqrt(sum((select(fullonlinedf[1,], -c(time, posX, posY, orientation, nas, posXY)) -
select(fullofflinedf[i,], -c(posX, posY)))^2))
}
for (i in 1:166) {
weight[i] = 1/(sqrt(sum((select(fullonlinedf[1,], -c(time, posX, posY, orientation, nas, posXY)) -
select(fullofflinedf[i,], -c(posX, posY)))^2)))
}
1/(sqrt(sum((select(fullonlinedf[1,], -c(time, posX, posY, orientation, nas, posXY)) -
select(fullofflinedf[i,], -c(posX, posY)))^2)))
weight = matrix(0, nrow = 166)
for (i in 1:166) {
weight[i] = 1/(sqrt(sum((select(fullonlinedf[1,], -c(time, posX, posY, orientation, nas, posXY)) -
select(fullofflinedf[i,], -c(posX, posY)))^2)))
}
weight
(sqrt(sum((select(fullonlinedf[1,], -c(time, posX, posY, orientation, nas, posXY)) -
select(fullofflinedf[i,], -c(posX, posY)))^2))
)
for (i in 1:166) {
weight[i] = 1/(sqrt(sum((select(fullonlinedf[1,], -c(time, posX, posY, orientation, nas, posXY)) -
select(fullofflinedf[i,], -c(posX, posY)))^2)))
weight
}
weight
for (i in 1:166) {
weight[i] = 1/(sqrt(sum((select(fullonlinedf[1,], -c(time, posX, posY, orientation, nas, posXY)) -
select(fullofflinedf[i,], -c(posX, posY)))^2)))
print(weight)
}
for (i in 1:166) {
weight[i] = 1/(sqrt(sum((select(fullonlinedf[1,], -c(time, posX, posY, orientation, nas, posXY)) -
select(fullofflinedf[i,], -c(posX, posY)))^2)))
print(sum((select(fullonlinedf[1,], -c(time, posX, posY, orientation, nas, posXY)) -
select(fullofflinedf[i,], -c(posX, posY)))^2))
}
fullofflinedf
weight = matrix(0, nrow = 166)
for (i in 1:1328) {
weight[i] = 1/(sqrt(sum((select(fullonlinedf[1,], -c(time, posX, posY, orientation, nas, posXY)) -
select(fullofflinedf[i,], -c(posX, posY)))^2)))
}
weight
max(weight)
max(weight)
min(weight)
which.max(weight)
weight = matrix(0, nrow = 166, ncol = 2)
weight[1] = 1:1328
for (i in 1:1328) {
weight[i,2] = 1/(sqrt(sum((select(fullonlinedf[1,], -c(time, posX, posY, orientation, nas, posXY)) -
select(fullofflinedf[i,], -c(posX, posY)))^2)))
}
weight
weight = matrix(0, nrow = 1328, ncol = 2)
weight[1] = 1:1328
for (i in 1:1328) {
weight[i,2] = 1/(sqrt(sum((select(fullonlinedf[1,], -c(time, posX, posY, orientation, nas, posXY)) -
select(fullofflinedf[i,], -c(posX, posY)))^2)))
}
which.max(weight)
weight
weight = matrix(0, nrow = 1328)
weight[1] = 1:1328
for (i in 1:1328) {
weight[i,2] = 1/(sqrt(sum((select(fullonlinedf[1,], -c(time, posX, posY, orientation, nas, posXY)) -
select(fullofflinedf[i,], -c(posX, posY)))^2)))
}
weight = matrix(0, nrow = 1328)
weight[1] = 1:1328
for (i in 1:1328) {
weight[i] = 1/(sqrt(sum((select(fullonlinedf[1,], -c(time, posX, posY, orientation, nas, posXY)) -
select(fullofflinedf[i,], -c(posX, posY)))^2)))
}
weight
fullonlinedf
fullofflinedf
weight = matrix(0, nrow = 1328)
for (i in 1:1328) {
weight[i] = 1/(sqrt(sum((select(fullonlinedf[1,], -c(time, posX, posY, orientation, nas, posXY)) -
select(fullofflinedf[i,], -c(posX, posY)))^2)))
}
weight
max(weight)
which.max(weight)
fullonlinedf[1,]
fullofflinedf[61,]
fullonlinedf[1,]
fullofflinedf[61,]
sort(weight, index.return = T)
sort(weight, index.return = T, decreasing = T)
weight = sort(weight, index.return = T, decreasing = T)
weight[1:7]
weight[1:7,]
weight[,1:7]
weight[1:7]
weight[1:2, 1:7]
weight[2, 1:7]
weight[2, 7]
weight[2]
weight[1:2][1:7]
weight[[1:2]][[1:7]]
weight[[1]][[1]]
weight[[1:2]][[1]]
weight$x[1:7]
weight$x[1:7]
weight$ix[1:7]
top7 = data.frame(index = weight$ix[1:7], weight = weight$x[1:7])
top7 = data.frame(index = weight$ix[1:7], initweight = weight$x[1:7])
top7$weight = top7$initweight / sum(top7$initweight)
top7
top7
top7$weight
top7 = data.frame(index = weight$ix[1:7], initweight = weight$x[1:7])
top7$weight = top7$initweight / sum(top7$initweight)
top7
for (i in 1:1328) {
angledf = fullofflinedf[fullofflinedf$angle = fullonlinedf$angle[1]]
weight = matrix(0, nrow = 1328)
for (i in 1:1328) {
angledf = fullofflinedf[fullofflinedf$angle == fullonlinedf$angle[1]]
weight[i] = 1/(sqrt(sum((select(fullonlinedf[1,], -c(time, posX, posY, orientation, nas, posXY)) -
select(angledf[i,], -c(posX, posY)))^2)))
}
angledf
angledf = fullofflinedf[fullofflinedf$angle == fullonlinedf$angle[1]]
fullonlinedf$angle[1]
fullofflinedf$angle
fullonlinedf$angle[1]
fullofflinedf[fullofflinedf$angle == fullonlinedf$angle[1],]
weight = matrix(0, nrow = 1328)
for (i in 1:1328) {
angledf = fullofflinedf[fullofflinedf$angle == fullonlinedf$angle[1],]
weight[i] = 1/(sqrt(sum((select(fullonlinedf[1,], -c(time, posX, posY, orientation, nas, posXY)) -
select(angledf[i,], -c(posX, posY)))^2)))
}
weight = sort(weight, index.return = T, decreasing = T)
top7 = data.frame(index = weight$ix[1:7], initweight = weight$x[1:7])
top7$weight = top7$initweight / sum(top7$initweight)
top7
weight
sum((select(fullonlinedf[1,], -c(time, posX, posY, orientation, nas, posXY)) -
select(angledf[i,], -c(posX, posY)))^2)
sqrt(sum((select(fullonlinedf[1,], -c(time, posX, posY, orientation, nas, posXY)) -
select(angledf[5,], -c(posX, posY)))^2)
)
sum((select(fullonlinedf[1,], -c(time, posX, posY, orientation, nas, posXY)) -
select(angledf[61,], -c(posX, posY)))^2)
select(fullonlinedf[1,], -c(time, posX, posY, orientation, nas, posXY)) -
select(angledf[61,], -c(posX, posY)))^2)
(sqrt(sum((select(fullonlinedf[1,], -c(time, posX, posY, orientation, nas, posXY)) -
select(angledf[61,], -c(posX, posY)))^2))
)
weight = matrix(0, nrow = 1328)
for (i in 1:1328) {
angledf = fullofflinedf[fullofflinedf$angle == fullonlinedf$angle[1],]
weight[i] = 1/(sqrt(sum((select(fullonlinedf[1,], -c(time, posX, posY, orientation, nas, posXY, angle)) -
select(angledf[61,], -c(posX, posY, angle)))^2)))
}
weight = sort(weight, index.return = T, decreasing = T)
top7 = data.frame(index = weight$ix[1:7], initweight = weight$x[1:7])
top7$weight = top7$initweight / sum(top7$initweight)
top7
weight = matrix(0, nrow = 1328)
for (i in 1:1328) {
angledf = fullofflinedf[fullofflinedf$angle == fullonlinedf$angle[1],]
weight[i] = 1/(sqrt(sum((select(fullonlinedf[1,], -c(time, posX, posY, orientation, nas, posXY, angle)) -
select(angledf[i,], -c(posX, posY, angle)))^2)))
}
weight = sort(weight, index.return = T, decreasing = T)
top7 = data.frame(index = weight$ix[1:7], initweight = weight$x[1:7])
top7$weight = top7$initweight / sum(top7$initweight)
top7
weight = matrix(0, nrow = 1328)
for (i in 1:1328) {
weight[i] = 1/(sqrt(sum((select(fullonlinedf[1,], -c(time, posX, posY, orientation, nas, posXY)) -
select(fullofflinedf[i,], -c(posX, posY)))^2)))
}
weight = sort(weight, index.return = T, decreasing = T)
top7 = data.frame(index = weight$ix[1:7], initweight = weight$x[1:7])
top7$weight = top7$initweight / sum(top7$initweight)
top7
(select(fullonlinedf[1,], -c(time, posX, posY, orientation, nas, posXY)) -
select(fullofflinedf[i,], -c(posX, posY)))^2)
select(fullonlinedf[1,], -c(time, posX, posY, orientation, nas, posXY)) -
select(fullofflinedf[i,], -c(posX, posY)))^2)
select(fullonlinedf[1,], -c(time, posX, posY, orientation, nas, posXY)) -
select(fullofflinedf[i,], -c(posX, posY)))^2
(select(fullonlinedf[1,], -c(time, posX, posY, orientation, nas, posXY)) -
select(fullofflinedf[i,], -c(posX, posY)))^2
(select(fullonlinedf[1,], -c(time, posX, posY, orientation, nas, posXY)) -
select(fullofflinedf[61,], -c(posX, posY)))^2
fullonlinedf
fullofflinedf
fullonlinedf
fullofflinedf
(select(fullonlinedf[1,], -c(time, posX, posY, orientation, nas, posXY)) -
select(fullofflinedf[61,], -c(posX, posY)))^2)
(select(fullonlinedf[1,], -c(time, posX, posY, orientation, nas, posXY)) -
select(fullofflinedf[61,], -c(posX, posY)))^2
(select(fullonlinedf[1,], -c(time, posX, posY, orientation, nas, posXY)) -
select(fullofflinedf[61,], -c(posX, posY)))
compofflinedf = select(fullofflinedf, c(angle, X00.14.bf.b1.97.8a, X00.14.bf.b1.97.90, X00.0f.a3.39.e1.c0, X00.14.bf.b1.97.8d, X00.14.bf.b1.97.81, X00.14.bf.3b.c7.c6, X00.0f.a3.39.dd.cd))
weight = matrix(0, nrow = 1328)
compofflinedf = select(fullofflinedf, c(angle, X00.14.bf.b1.97.8a, X00.14.bf.b1.97.90, X00.0f.a3.39.e1.c0, X00.14.bf.b1.97.8d, X00.14.bf.b1.97.81, X00.14.bf.3b.c7.c6, X00.0f.a3.39.dd.cd))
componlinedf = select(fullonlinedf, c(angle, X00.14.bf.b1.97.8a, X00.14.bf.b1.97.90, X00.0f.a3.39.e1.c0, X00.14.bf.b1.97.8d, X00.14.bf.b1.97.81, X00.14.bf.3b.c7.c6, X00.0f.a3.39.dd.cd))
for (i in 1:1328) {
weight[i] = 1/(sqrt(sum(compofflinedf[1] -
compofflinedf[i,]^2)))
}
compofflinedf
componlinedf
weight = matrix(0, nrow = 1328)
compofflinedf = select(fullofflinedf, c(angle, X00.14.bf.b1.97.8a, X00.14.bf.b1.97.90, X00.0f.a3.39.e1.c0, X00.14.bf.b1.97.8d, X00.14.bf.b1.97.81, X00.14.bf.3b.c7.c6, X00.0f.a3.39.dd.cd))
componlinedf = select(fullonlinedf, c(angle, X00.14.bf.b1.97.8a, X00.14.bf.b1.97.90, X00.0f.a3.39.e1.c0, X00.14.bf.b1.97.8d, X00.14.bf.b1.97.81, X00.14.bf.3b.c7.c6, X00.0f.a3.39.dd.cd))
for (i in 1:1328) {
weight[i] = 1/(sqrt(sum(compofflinedf[1,] -
compofflinedf[i,]^2)))
}
weight = sort(weight, index.return = T, decreasing = T)
top7 = data.frame(index = weight$ix[1:7], initweight = weight$x[1:7])
top7$weight = top7$initweight / sum(top7$initweight)
top7
compofflinedf
weight = matrix(0, nrow = 1328)
compofflinedf = select(fullofflinedf, c(angle, X00.14.bf.b1.97.8a, X00.14.bf.b1.97.90, X00.0f.a3.39.e1.c0, X00.14.bf.b1.97.8d, X00.14.bf.b1.97.81, X00.14.bf.3b.c7.c6, X00.0f.a3.39.dd.cd))
componlinedf = select(fullonlinedf, c(angle, X00.14.bf.b1.97.8a, X00.14.bf.b1.97.90, X00.0f.a3.39.e1.c0, X00.14.bf.b1.97.8d, X00.14.bf.b1.97.81, X00.14.bf.3b.c7.c6, X00.0f.a3.39.dd.cd))
for (i in 1:1328) {
weight[i] = 1/(sqrt(sum(compofflinedf[1,] -
compofflinedf[i,])^2))
}
weight = sort(weight, index.return = T, decreasing = T)
top7 = data.frame(index = weight$ix[1:7], initweight = weight$x[1:7])
top7$weight = top7$initweight / sum(top7$initweight)
top7
componlinedf
compofflinedf
weight = matrix(0, nrow = 1328)
compofflinedf = select(fullofflinedf, c(angle, X00.14.bf.b1.97.8a, X00.14.bf.b1.97.90, X00.0f.a3.39.e1.c0, X00.14.bf.b1.97.8d, X00.14.bf.b1.97.81, X00.14.bf.3b.c7.c6, X00.0f.a3.39.dd.cd))
componlinedf = select(fullonlinedf, c(angle, X00.14.bf.b1.97.8a, X00.14.bf.b1.97.90, X00.0f.a3.39.e1.c0, X00.14.bf.b1.97.8d, X00.14.bf.b1.97.81, X00.14.bf.3b.c7.c6, X00.0f.a3.39.dd.cd))
for (i in 1:1328) {
weight[i] = 1/(sqrt(sum(componlinedf[1,] -
compofflinedf[i,])^2))
}
weight = sort(weight, index.return = T, decreasing = T)
top7 = data.frame(index = weight$ix[1:7], initweight = weight$x[1:7])
top7$weight = top7$initweight / sum(top7$initweight)
top7
componlinedf
(sum(componlinedf[1,] -
compofflinedf[67,])^2)
componlinedf[1,] -
compofflinedf[67,]
componlinedf[1,] -
compofflinedf[67,])^2
componlinedf[1,] -
compofflinedf[67,])^2
componlinedf[1,] -
compofflinedf[67,]))^2
(componlinedf[1,] -
compofflinedf[67,]))^2
1/(sqrt(sum((componlinedf[1,] -
compofflinedf[67,]))^2))
(componlinedf[1,] -
compofflinedf[67,]))^2
(componlinedf[1,] -
compofflinedf[67,])^2)
(componlinedf[1,] -
compofflinedf[67,])^2
componlinedf[1,] -
compofflinedf[67,]
1/(sqrt(sum((componlinedf[1,] -
compofflinedf[67,])^2))
compofflinedf
compofflinedf
componlinedf[1,] -
compofflinedf[67,]
(componlinedf[1,] -
compofflinedf[67,])^2
1/(sqrt(sum((componlinedf[1,] -
compofflinedf[67,])^2)))
weight = matrix(0, nrow = 1328)
compofflinedf = select(fullofflinedf, c(angle, X00.14.bf.b1.97.8a, X00.14.bf.b1.97.90, X00.0f.a3.39.e1.c0, X00.14.bf.b1.97.8d, X00.14.bf.b1.97.81, X00.14.bf.3b.c7.c6, X00.0f.a3.39.dd.cd))
componlinedf = select(fullonlinedf, c(angle, X00.14.bf.b1.97.8a, X00.14.bf.b1.97.90, X00.0f.a3.39.e1.c0, X00.14.bf.b1.97.8d, X00.14.bf.b1.97.81, X00.14.bf.3b.c7.c6, X00.0f.a3.39.dd.cd))
for (i in 1:1328) {
weight[i] = 1/(sqrt(sum((componlinedf[1,] -
compofflinedf[67,])^2)))
}
weight = sort(weight, index.return = T, decreasing = T)
top7 = data.frame(index = weight$ix[1:7], initweight = weight$x[1:7])
top7$weight = top7$initweight / sum(top7$initweight)
top7
weight = matrix(0, nrow = 1328)
compofflinedf = select(fullofflinedf, c(angle, X00.14.bf.b1.97.8a, X00.14.bf.b1.97.90, X00.0f.a3.39.e1.c0, X00.14.bf.b1.97.8d, X00.14.bf.b1.97.81, X00.14.bf.3b.c7.c6, X00.0f.a3.39.dd.cd))
componlinedf = select(fullonlinedf, c(angle, X00.14.bf.b1.97.8a, X00.14.bf.b1.97.90, X00.0f.a3.39.e1.c0, X00.14.bf.b1.97.8d, X00.14.bf.b1.97.81, X00.14.bf.3b.c7.c6, X00.0f.a3.39.dd.cd))
for (i in 1:1328) {
weight[i] = 1/(sqrt(sum((componlinedf[1,] -
compofflinedf[i,])^2)))
}
weight = sort(weight, index.return = T, decreasing = T)
top7 = data.frame(index = weight$ix[1:7], initweight = weight$x[1:7])
top7$weight = top7$initweight / sum(top7$initweight)
top7
compofflinedf[compofflinedf$angle ==  componlinedf$angle[1]]
compofflinedf
compofflinedf[compofflinedf$angle ==  componlinedf$angle[1],]
weight = matrix(0, nrow = 166)
compofflinedf = select(fullofflinedf, c(angle, X00.14.bf.b1.97.8a, X00.14.bf.b1.97.90, X00.0f.a3.39.e1.c0, X00.14.bf.b1.97.8d, X00.14.bf.b1.97.81, X00.14.bf.3b.c7.c6, X00.0f.a3.39.dd.cd))
componlinedf = select(fullonlinedf, c(angle, X00.14.bf.b1.97.8a, X00.14.bf.b1.97.90, X00.0f.a3.39.e1.c0, X00.14.bf.b1.97.8d, X00.14.bf.b1.97.81, X00.14.bf.3b.c7.c6, X00.0f.a3.39.dd.cd))
for (i in 1:166) {
compangonlinedf = compofflinedf[compofflinedf$angle ==  componlinedf$angle[1],]
weight[i] = 1/(sqrt(sum((componlinedf[1,] -
compangofflinedf[i,])^2)))
}
componlinedf[1,2:8]
weight = matrix(0, nrow = 166)
compofflinedf = select(fullofflinedf, c(angle, X00.14.bf.b1.97.8a, X00.14.bf.b1.97.90, X00.0f.a3.39.e1.c0, X00.14.bf.b1.97.8d, X00.14.bf.b1.97.81, X00.14.bf.3b.c7.c6, X00.0f.a3.39.dd.cd))
componlinedf = select(fullonlinedf, c(angle, X00.14.bf.b1.97.8a, X00.14.bf.b1.97.90, X00.0f.a3.39.e1.c0, X00.14.bf.b1.97.8d, X00.14.bf.b1.97.81, X00.14.bf.3b.c7.c6, X00.0f.a3.39.dd.cd))
for (i in 1:166) {
compangofflinedf = compofflinedf[compofflinedf$angle ==  componlinedf$angle[1],]
weight[i] = 1/(sqrt(sum((componlinedf[1,2:8] -
compangofflinedf[i,2:8])^2)))
}
weight = sort(weight, index.return = T, decreasing = T)
top7 = data.frame(index = weight$ix[1:7], initweight = weight$x[1:7])
top7$weight = top7$initweight / sum(top7$initweight)
top7
weight = matrix(0, nrow = 1328)
compofflinedf = select(fullofflinedf, c(angle, X00.14.bf.b1.97.8a, X00.14.bf.b1.97.90, X00.0f.a3.39.e1.c0, X00.14.bf.b1.97.8d, X00.14.bf.b1.97.81, X00.14.bf.3b.c7.c6, X00.0f.a3.39.dd.cd))
componlinedf = select(fullonlinedf, c(angle, X00.14.bf.b1.97.8a, X00.14.bf.b1.97.90, X00.0f.a3.39.e1.c0, X00.14.bf.b1.97.8d, X00.14.bf.b1.97.81, X00.14.bf.3b.c7.c6, X00.0f.a3.39.dd.cd))
for (i in 1:1328) {
compangonlinedf =
weight[i] = 1/(sqrt(sum((componlinedf[1,] -
compangofflinedf[i,])^2)))
}
weight = sort(weight, index.return = T, decreasing = T)
top7 = data.frame(index = weight$ix[1:7], initweight = weight$x[1:7])
top7$weight = top7$initweight / sum(top7$initweight)
top7
weight = matrix(0, nrow = 1328)
compofflinedf = select(fullofflinedf, c(angle, X00.14.bf.b1.97.8a, X00.14.bf.b1.97.90, X00.0f.a3.39.e1.c0, X00.14.bf.b1.97.8d, X00.14.bf.b1.97.81, X00.14.bf.3b.c7.c6, X00.0f.a3.39.dd.cd))
componlinedf = select(fullonlinedf, c(angle, X00.14.bf.b1.97.8a, X00.14.bf.b1.97.90, X00.0f.a3.39.e1.c0, X00.14.bf.b1.97.8d, X00.14.bf.b1.97.81, X00.14.bf.3b.c7.c6, X00.0f.a3.39.dd.cd))
for (i in 1:1328) {
weight[i] = 1/(sqrt(sum((componlinedf[1,] -
compofflinedf[i,])^2)))
}
weight = sort(weight, index.return = T, decreasing = T)
top7 = data.frame(index = weight$ix[1:7], initweight = weight$x[1:7])
top7$weight = top7$initweight / sum(top7$initweight)
top7
fullofflinedf$posX[top7$weight]
fullofflinedf$posX
top7$weight
fullofflinedf$posX[top7$weight]
fullofflinedf$posX[1]
fullofflinedf$posX[1:7]
fullofflinedf$posX[top7$weight[1:7]]
top7$weight[1:7]
c(top7$weight)
fullofflinedf$posX[top7$index]
mean(fullofflinedf$posX[top7$index] * top7$weight)
top7$weight
sum(top7$weight)
fullofflinedf$posX[top7$index] * top7$weight
sum(fullofflinedf$posX[top7$index] * top7$weight)
sum(fullofflinedf$posX[top7$index] * top7$weight)
sum(fullofflinedf$posY[top7$index] * top7$weight)
fullonlinedf
weight = matrix(0, ncol = 2, nrow = 1328)
predx = matrix(0, nrow = 6592)
predy = matrix(0, nrow = 6592)
compofflinedf = select(fullofflinedf, c(angle, X00.14.bf.b1.97.8a, X00.14.bf.b1.97.90, X00.0f.a3.39.e1.c0, X00.14.bf.b1.97.8d, X00.14.bf.b1.97.81, X00.14.bf.3b.c7.c6, X00.0f.a3.39.dd.cd))
componlinedf = select(fullonlinedf, c(angle, X00.14.bf.b1.97.8a, X00.14.bf.b1.97.90, X00.0f.a3.39.e1.c0, X00.14.bf.b1.97.8d, X00.14.bf.b1.97.81, X00.14.bf.3b.c7.c6, X00.0f.a3.39.dd.cd))
for (j in 1:6592) {
for (i in 1:1328) {
weight[j][i] = 1/(sqrt(sum((componlinedf[j,] -
compofflinedf[i,])^2)))
}
weights = sort(weight[j], index.return = T, decreasing = T)
top7 = data.frame(index = weights$ix[1:7], initweight = weights$x[1:7])
top7$weight = top7$initweight / sum(top7$initweight)
predx[j] = sum(fullofflinedf$posX[top7$index] * top7$weight)
predy[j] = sum(fullofflinedf$posY[top7$index] * top7$weight)
}
weight = matrix(0, nrow = 1328)
predx = matrix(0, nrow = 6592)
predy = matrix(0, nrow = 6592)
compofflinedf = select(fullofflinedf, c(angle, X00.14.bf.b1.97.8a, X00.14.bf.b1.97.90, X00.0f.a3.39.e1.c0, X00.14.bf.b1.97.8d, X00.14.bf.b1.97.81, X00.14.bf.3b.c7.c6, X00.0f.a3.39.dd.cd))
componlinedf = select(fullonlinedf, c(angle, X00.14.bf.b1.97.8a, X00.14.bf.b1.97.90, X00.0f.a3.39.e1.c0, X00.14.bf.b1.97.8d, X00.14.bf.b1.97.81, X00.14.bf.3b.c7.c6, X00.0f.a3.39.dd.cd))
for (j in 1:6592) {
for (i in 1:1328) {
weight[i] = 1/(sqrt(sum((componlinedf[j,] -
compofflinedf[i,])^2)))
}
weights = sort(weight, index.return = T, decreasing = T)
top7 = data.frame(index = weights$ix[1:7], initweight = weights$x[1:7])
top7$weight = top7$initweight / sum(top7$initweight)
predx[j] = sum(fullofflinedf$posX[top7$index] * top7$weight)
predy[j] = sum(fullofflinedf$posY[top7$index] * top7$weight)
}
compangofflinedf = compofflinedf[compofflinedf$angle = componlinedf$angle[1]]
compangofflinedf = compofflinedf[compofflinedf$angle == componlinedf$angle[1]]
compofflinedf$angle
componlinedf$angle[1]
compofflinedf[compofflinedf$angle == componlinedf$angle[1]]
compofflinedf[compofflinedf$angle == componlinedf$angle[1]]
compofflinedf
compangofflinedf
compangofflinedf = compofflinedf[compofflinedf$angle == componlinedf$angle[1]]
componlinedf$angle[1]
compofflinedf$angle
compofflinedf
compofflinedf[compofflinedf$angle == 45]
compofflinedf$angle
compofflinedf[compofflinedf$angle == componlinedf$angle[1],]
compangofflinedf = compofflinedf[compofflinedf$angle == componlinedf$angle[1],]
sum(compangofflinedf$posY[top7$index] * top7$weight)
sum(compangofflinedf$posY[top7$index] * top7$weight)
compangofflinedf$posY[top7$index]
top7
compangofflinedf
compofflinedf = select(fullofflinedf, c(angle, X00.14.bf.b1.97.8a, X00.14.bf.b1.97.90, X00.0f.a3.39.e1.c0, X00.14.bf.b1.97.8d, X00.14.bf.b1.97.81, X00.14.bf.3b.c7.c6, X00.0f.a3.39.dd.cd, posX, posY))
componlinedf = select(fullonlinedf, c(angle, X00.14.bf.b1.97.8a, X00.14.bf.b1.97.90, X00.0f.a3.39.e1.c0, X00.14.bf.b1.97.8d, X00.14.bf.b1.97.81, X00.14.bf.3b.c7.c6, X00.0f.a3.39.dd.cd))
compangofflinedf = compofflinedf[compofflinedf$angle == componlinedf$angle[1],]
compangofflinedf$posX[top7$index]
sum(compangofflinedf$posX[top7$index] * top7$weight)
sum(compangofflinedf$posY[top7$index] * top7$weight)
weight = matrix(0, nrow = 166)
predx = matrix(0, nrow = 6592)
predy = matrix(0, nrow = 6592)
compofflinedf = select(fullofflinedf, c(angle, X00.14.bf.b1.97.8a, X00.14.bf.b1.97.90, X00.0f.a3.39.e1.c0, X00.14.bf.b1.97.8d, X00.14.bf.b1.97.81, X00.14.bf.3b.c7.c6, X00.0f.a3.39.dd.cd, posX, posY))
componlinedf = select(fullonlinedf, c(angle, X00.14.bf.b1.97.8a, X00.14.bf.b1.97.90, X00.0f.a3.39.e1.c0, X00.14.bf.b1.97.8d, X00.14.bf.b1.97.81, X00.14.bf.3b.c7.c6, X00.0f.a3.39.dd.cd))
for (j in 1:6592) {
for (i in 1:166) {
compangofflinedf = compofflinedf[compofflinedf$angle == componlinedf$angle[1],]
weight[i] = 1/(sqrt(sum((componlinedf[j,2:8] -
compangofflinedf[i,2:8])^2)))
}
weights = sort(weight, index.return = T, decreasing = T)
top7 = data.frame(index = weights$ix[1:7], initweight = weights$x[1:7])
top7$weight = top7$initweight / sum(top7$initweight)
predx[j] = sum(compangofflinedf$posX[top7$index] * top7$weight)
predy[j] = sum(compangofflinedf$posY[top7$index] * top7$weight)
}
predx
predy
fullonlinedf$predx = predx
fullonlinedf$predy = predy
mean(sqrt((fullonlinedf$posY - fullonlinedf$predy)^2))
mean(sqrt((fullonlinedf$posX - fullonlinedf$predx)^2))
